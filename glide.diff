diff --no-dereference -N -r current/vendor/github.com/openshift/api/servicecertsigner/v1alpha1/types.go updated/vendor/github.com/openshift/api/servicecertsigner/v1alpha1/types.go
25,34d24
< 
< 	// IntermediateCertFile is the name of a file containing a
< 	// PEM-encoded certificate. Only required if the initial cert has
< 	// been rotated. The certificate should consist of the public key
< 	// of the current CA signed by the private key of the previous
< 	// CA. When included with a serving cert generated by the current
< 	// CA, the certificate will allow clients with a stale CA bundle
< 	// to trust the serving cert.
< 	// +optional
< 	IntermediateCertFile string `json:"intermediateCertFile"`
diff --no-dereference -N -r current/vendor/github.com/openshift/library-go/pkg/crypto/crypto.go updated/vendor/github.com/openshift/library-go/pkg/crypto/crypto.go
9d8
< 	"crypto/sha1"
569,575d567
< func rsaPublicKeyHash(key crypto.PublicKey) []byte {
< 	rsaKey := key.(*rsa.PublicKey)
< 	hash := sha1.New()
< 	hash.Write(rsaKey.N.Bytes())
< 	return hash.Sum(nil)
< }
< 
582,585c574
< 	// AuthorityKeyId and SubjectKeyId should match for a self-signed CA
< 	authorityKeyId := rsaPublicKeyHash(rootcaPublicKey)
< 	subjectKeyId := authorityKeyId
< 	rootcaTemplate := newSigningCertificateTemplateForDuration(subject, caLifetime, time.Now, authorityKeyId, subjectKeyId)
---
> 	rootcaTemplate := newSigningCertificateTemplateForDuration(subject, caLifetime, time.Now)
603,605c592
< 	authorityKeyId := issuer.Config.Certs[0].SubjectKeyId
< 	subjectKeyId := rsaPublicKeyHash(signerPublicKey)
< 	signerTemplate := newSigningCertificateTemplateForDuration(pkix.Name{CommonName: name}, caLifetime, time.Now, authorityKeyId, subjectKeyId)
---
> 	signerTemplate := newSigningCertificateTemplateForDuration(pkix.Name{CommonName: name}, caLifetime, time.Now)
664,666c651
< 	authorityKeyId := ca.Config.Certs[0].SubjectKeyId
< 	subjectKeyId := rsaPublicKeyHash(serverPublicKey)
< 	serverTemplate := newServerCertificateTemplate(pkix.Name{CommonName: hostnames.List()[0]}, hostnames.List(), expireDays, time.Now, authorityKeyId, subjectKeyId)
---
> 	serverTemplate := newServerCertificateTemplate(pkix.Name{CommonName: hostnames.List()[0]}, hostnames.List(), expireDays, time.Now)
685,687c670
< 	authorityKeyId := ca.Config.Certs[0].SubjectKeyId
< 	subjectKeyId := rsaPublicKeyHash(serverPublicKey)
< 	serverTemplate := newServerCertificateTemplateForDuration(pkix.Name{CommonName: hostnames.List()[0]}, hostnames.List(), lifetime, time.Now, authorityKeyId, subjectKeyId)
---
> 	serverTemplate := newServerCertificateTemplateForDuration(pkix.Name{CommonName: hostnames.List()[0]}, hostnames.List(), lifetime, time.Now)
832c815
< func newSigningCertificateTemplateForDuration(subject pkix.Name, caLifetime time.Duration, currentTime func() time.Time, authorityKeyId, subjectKeyId []byte) *x509.Certificate {
---
> func newSigningCertificateTemplateForDuration(subject pkix.Name, caLifetime time.Duration, currentTime func() time.Time) *x509.Certificate {
845,847d827
< 
< 		AuthorityKeyId: authorityKeyId,
< 		SubjectKeyId:   subjectKeyId,
852c832
< func newServerCertificateTemplate(subject pkix.Name, hosts []string, expireDays int, currentTime func() time.Time, authorityKeyId, subjectKeyId []byte) *x509.Certificate {
---
> func newServerCertificateTemplate(subject pkix.Name, hosts []string, expireDays int, currentTime func() time.Time) *x509.Certificate {
864c844
< 	return newServerCertificateTemplateForDuration(subject, hosts, lifetime, currentTime, authorityKeyId, subjectKeyId)
---
> 	return newServerCertificateTemplateForDuration(subject, hosts, lifetime, currentTime)
868c848
< func newServerCertificateTemplateForDuration(subject pkix.Name, hosts []string, lifetime time.Duration, currentTime func() time.Time, authorityKeyId, subjectKeyId []byte) *x509.Certificate {
---
> func newServerCertificateTemplateForDuration(subject pkix.Name, hosts []string, lifetime time.Duration, currentTime func() time.Time) *x509.Certificate {
881,883d860
< 
< 		AuthorityKeyId: authorityKeyId,
< 		SubjectKeyId:   subjectKeyId,
